
Interrupt1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098d  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000856  00000000  00000000  00000c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000369  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  000017c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044b  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bc  00000000  00000000  00001c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	54 c0       	rjmp	.+168    	; 0xae <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	44 d0       	rcall	.+136    	; 0x132 <main>
  aa:	52 c0       	rjmp	.+164    	; 0x150 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_1>:
#include <stdlib.h>
#include "_main.h"
#define F_CPU 14745600UL

char direction;
SIGNAL(INT0_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	//ISR
	direction = ~direction;
  ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  be:	80 95       	com	r24
  c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <Interrupt_init>:
void Interrupt_init() {
	SREG |= 0x80;
  d0:	8f b7       	in	r24, 0x3f	; 63
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	8f bf       	out	0x3f, r24	; 63
	EICRA = 0x02; //INT 0의 F E 트리거
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x01; //INT 0만 허가
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	89 bf       	out	0x39, r24	; 57
	DDRD=0x00; //INT 0~3은 PD 0~3
  e0:	11 ba       	out	0x11, r1	; 17
  e2:	08 95       	ret

000000e4 <PB_Lshift>:
}
void PB_Lshift() {
  e4:	28 e0       	ldi	r18, 0x08	; 8
  e6:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	char Temp;
	Temp = 0xFE;
  e8:	8e ef       	ldi	r24, 0xFE	; 254
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	4f e9       	ldi	r20, 0x9F	; 159
  ec:	56 e8       	ldi	r21, 0x86	; 134
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	41 50       	subi	r20, 0x01	; 1
  f2:	50 40       	sbci	r21, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <PB_Lshift+0xc>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <PB_Lshift+0x16>
  fa:	00 00       	nop
	for(i = 0; i < 8; i++) {
		_delay_ms(500);
		PORTB = Temp;
  fc:	88 bb       	out	0x18, r24	; 24
		Temp = (Temp << 1) | 0x01;
  fe:	88 0f       	add	r24, r24
 100:	81 60       	ori	r24, 0x01	; 1
 102:	21 50       	subi	r18, 0x01	; 1
 104:	31 09       	sbc	r19, r1
}
void PB_Lshift() {
	int i;
	char Temp;
	Temp = 0xFE;
	for(i = 0; i < 8; i++) {
 106:	89 f7       	brne	.-30     	; 0xea <PB_Lshift+0x6>
		_delay_ms(500);
		PORTB = Temp;
		Temp = (Temp << 1) | 0x01;
	}
}
 108:	08 95       	ret

0000010a <PB_Rshift>:
void PB_Rshift() {
 10a:	28 e0       	ldi	r18, 0x08	; 8
 10c:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	char Temp;
	Temp = 0x7E;
 10e:	8e e7       	ldi	r24, 0x7E	; 126
 110:	4f e9       	ldi	r20, 0x9F	; 159
 112:	56 e8       	ldi	r21, 0x86	; 134
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	41 50       	subi	r20, 0x01	; 1
 118:	50 40       	sbci	r21, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <PB_Rshift+0xc>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <PB_Rshift+0x16>
 120:	00 00       	nop
	for(i = 0; i < 8; i++) {
		_delay_ms(500);
		PORTB = Temp;
 122:	88 bb       	out	0x18, r24	; 24
		Temp = (Temp >> 1) | 0x80;
 124:	86 95       	lsr	r24
 126:	80 68       	ori	r24, 0x80	; 128
		PORTB = Temp;
 128:	88 bb       	out	0x18, r24	; 24
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	31 09       	sbc	r19, r1
}
void PB_Rshift() {
	int i;
	char Temp;
	Temp = 0x7E;
	for(i = 0; i < 8; i++) {
 12e:	81 f7       	brne	.-32     	; 0x110 <PB_Rshift+0x6>
		_delay_ms(500);
		PORTB = Temp;
		Temp = (Temp >> 1) | 0x80;
		PORTB = Temp;
	}
}
 130:	08 95       	ret

00000132 <main>:
int main(void)
{
	Interrupt_init();
 132:	ce df       	rcall	.-100    	; 0xd0 <Interrupt_init>
	DDRB=0xff;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	87 bb       	out	0x17, r24	; 23
	PORTB=0x0f;
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	88 bb       	out	0x18, r24	; 24
	direction=0;
 13c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	while(1) {
		if(direction) PB_Lshift();
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 144:	88 23       	and	r24, r24
 146:	11 f0       	breq	.+4      	; 0x14c <main+0x1a>
 148:	cd df       	rcall	.-102    	; 0xe4 <PB_Lshift>
		else PB_Rshift();
 14a:	fa cf       	rjmp	.-12     	; 0x140 <main+0xe>
 14c:	de df       	rcall	.-68     	; 0x10a <PB_Rshift>
 14e:	f8 cf       	rjmp	.-16     	; 0x140 <main+0xe>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
